var MAS=MAS||{};MAS.PUSH=MAS.PUSH||function(){var e,n,i="Notifications permissions denied",t={host:"https://mas.protecmedia.com",appid:"",senderid:"",workerpath:"",tracker:null,firebase:{firebaseAppUrl:"https://www.gstatic.com/firebasejs/5.10.0/firebase-app.js",firebaseMessagingUrl:"https://www.gstatic.com/firebasejs/5.10.0/firebase-messaging.js"}},o=function(e){return new Promise((function(n,i){var t=document.createElement("script");t.async=!0,t.defer=!0,t.onload=n,t.onerror=i,t.src=e,document.getElementsByTagName("head")[0].appendChild(t)}))},r=function(){return new Promise((function(e,n){u.info("Initializing Firebase application..."),firebase.initializeApp({messagingSenderId:t.senderid});var i=firebase.messaging();u.info("Creating onTokenRefresh event..."),i.onTokenRefresh((function(){i.getToken().then((function(e){d.unsubscribe(),a(e)})).catch((function(e){u.error("Unable to retrieve refreshed token",e)}))})),u.info("Creating onMessage event..."),i.onMessage((function(e){var n=e.data.title,i={body:e.data.body,icon:e.data.icon,data:{click_action:e.data.click_action}};void 0!==e.data.tag&&(i.tag=e.data.tag),e.data.image&&(i.image=e.data.image),new Notification(n,i).onclick=function(e){e.preventDefault(),e.target.close(),window.open(e.target.data.click_action,"_blank")}})),u.info("Registering serviceworker..."),navigator.serviceWorker.register(t.workerpath).then((function(n){u.info("Serviceworker successfully registered"),i.useServiceWorker(n),d.load(),d.isSubscribed()&&("denied"===Notification.permission?(u.warn("User subscribed but notifications denied. Unsubscribing..."),d.unsubscribe()):"granted"===Notification.permission&&d.validate()),e()})).catch((function(e){u.err("Service worker registration failed:",e),n(e)}))}))},s=function(){return new Promise((function(e,n){if("denied"===Notification.permission)return u.warn("Notifications blocked by user"),MAS.PUSH.HOOK.onNotificationsBlocked(),void n(i);if(void 0!==f.getCookie("ITR_WPN_DELAYED_REQUEST_PERMISSION"))return u.warn("Notifications delayed by user"),MAS.PUSH.HOOK.onNotificationsDelayed(),void n("Notifications delayed by user");if(d.isSubscribed())e();else if(d.isSuspended())u.warn("Notifications suspended by user"),n("Notifications suspended by user");else{const i=firebase.messaging();i.requestPermission().then((function(){u.info("Notification permission granted"),i.getToken().then((function(i){i?a(i).then((function(){e()})).catch((function(e){n(e)})):(d.unsuscribe(),u.err("No Instance ID token available. Request permission to generate one."),n("No Instance ID token available. Request permission to generate one."))})).catch((function(e){u.err("An error occurred while retrieving token. ",e),d.unsuscribe(),n("An error occurred while retrieving token.")}))})).catch((function(e){u.err("Unable to get permission to notify.",e),n("Unable to get permission to notify.")}))}}))},a=function(e){return new Promise((function(n,i){c(e).then((function(i){d.subscribe(i.tokenid,e),201===i.status&&f.notifySubscriptionToNotifications(),n()})).catch((function(){u.err("Error sending token to server"),d.unsubscribe(),i("Error sending token to server")}))}))},c=function(e){return u.info("Sending token to server..."),new Promise((function(n,i){MAS.PUSH.HOOK.beforeSendingTokenToServer(e);var o=t.host+"/WebPushNotification/instance/"+encodeURI(e)+"/app/"+t.appid,r=f.getVisitorId();void 0!==r&&null!=r&&""!==r&&(o+="/"+r);var s=new XMLHttpRequest;s.open("POST",o),s.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),s.onload=function(){if(201===s.status||409===s.status){u.info("Token sent to server");var e=JSON.parse(s.responseText),t={status:s.status,tokenid:201===s.status?e.token_id:e.error.detail};MAS.PUSH.HOOK.afterSendingTokenToServer(),n(t)}else{var o="An error occurred while sending token. Server response was"+s.status;u.err(o),MAS.PUSH.HOOK.afterSendingTokenToServer(o),i(o)}},s.send()}))},u=function(){var e={log:!1,info:!1,warn:!1,error:!0},n="log",i="info",t="warn",o="error",r=function(n,i,t){e[n]&&(void 0===t?console[n](i):console[n](i,t))};return{configure:function(n){const i=Object.keys(n);for(var t=0;t<i.length;t++)e[i[t]]=n[i[t]]},log:function(e,i){r(n,e,i)},info:function(e,n){r(i,e,n)},warn:function(e,n){r(t,e,n)},err:function(e,n){r(o,e,n)}}}(),f={isCompatible:function(){return"Notification"in window&&"serviceWorker"in navigator&&navigator.cookieEnabled},getCookie:function(e){for(var n=e+"=",i=document.cookie.split(";"),t=void 0,o=0;o<i.length;o++){for(var r=i[o];" "==r.charAt(0);)r=r.substring(1);if(0==r.indexOf(n)){t=decodeURIComponent(r.substring(n.length,r.length));break}}return t},setCookie:function(e,n,i,t){var o=new Date;o.setTime(o.getTime()+i);var r="expires="+o.toUTCString(),s=e+"="+encodeURIComponent(n)+";"+r+";path=/;domain="+t;document.cookie=s},getDomain:function(){if(!(e=MAS.PUSH.HOOK.onGetDomain())){for(var e,n=0,i=(e=document.domain).split("."),t="_gd"+(new Date).getTime();n<i.length-1&&-1==document.cookie.indexOf(t+"="+t);)e=i.slice(-1-++n).join("."),document.cookie=t+"="+t+";domain="+e+";";document.cookie=t+"=;expires=Thu, 01 Jan 1970 00:00:01 GMT;domain="+e+";"}return e},notifySubscriptionToNotifications:function(){null!==t.tracker&&void 0!==t.tracker&&t.tracker.notifySubscriptionToNotifications()},getVisitorId:function(){return"undefined"!=typeof Piwik&&"function"==typeof Piwik.getTracker&&"function"==typeof Piwik.getTracker().getVisitorId?Piwik.getTracker().getVisitorId():""}},d=(e="",n={tokenId:"",firebaseToken:""},{getStatus:function(){return e},getToken:function(){return n},store:function(){var i=e+";"+n.tokenId+";"+n.firebaseToken;f.setCookie("ITR_WPN_SUBSCRIPTION",i,15768e8,f.getDomain())},load:function(){var i=f.getCookie("ITR_WPN_SUBSCRIPTION");void 0!==i?3===(i=i.split(";")).length&&(e=i[0],n.tokenId=i[1],n.firebaseToken=i[2]):e="unsubscribed"},isSubscribed:function(){return"subscribed"===e},isUnsubscribed:function(){return"unsubscribed"===e},isSuspended:function(){return"suspended"===e},validate:function(){void 0===f.getCookie("ITR_WPN_SUBSCRIPTION_VALIDATION")&&(u.info("Validating user token..."),firebase.messaging().getToken().then((function(e){e&&(n.firebaseToken!==e&&(u.info("Updating token in server..."),c(e).then((function(n){u.info("Token updated"),d.subscribe(n.tokenid,e)})).catch((function(e){u.err("Unable to register new token",e)}))),f.setCookie("ITR_WPN_SUBSCRIPTION_VALIDATION","true",72e5,f.getDomain()))})).catch((e=>{u.err("Unable to retrieve notification token",e)})))},subscribe:function(i,t){e="subscribed",n.tokenId=i,n.firebaseToken=t,this.store()},unsubscribe:function(){e="unsubscribed",n.tokenId="",n.firebaseToken="",this.store()},suspend:function(i){i=24*i*60*60*1e3,f.setCookie("ITR_WPN_DELAYED_REQUEST_PERMISSION",i,i,f.getDomain()),e="suspended",n.tokenId="",n.firebaseToken="",this.store()},unsuspend:function(){"suspended"===e&&(e="unsubscribed",f.setCookie("ITR_WPN_DELAYED_REQUEST_PERMISSION","",0,f.getDomain()),this.store())}}),b=function(){return new Promise((function(e,n){"denied"!==Notification.permission?(d.unsuspend(),s().then((function(){e()})).catch((function(e){u.err("Unable to subscibe to notification",e),n(e)}))):n(i)}))},g=function(){return new Promise((function(e,n){(function(e){return u.info("Removing token from server..."),new Promise((function(n,i){MAS.PUSH.HOOK.beforeDeletingTokenToServer(e);var o=new XMLHttpRequest;o.open("DELETE",t.host+"/WebPushNotification/instance/"+encodeURI(e)),o.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),o.onload=function(){if(204===o.status||404===o.status)u.info("Token removed from server"),MAS.PUSH.HOOK.afterDeletingTokenToServer(),n();else{var e="An error occurred while deleting the token. Server response was"+o.status;u.err(e),MAS.PUSH.HOOK.afterDeletingTokenToServer(e),i(e)}},o.send()}))})(d.getToken().firebaseToken).then((function(n){d.suspend(30),e()})).catch((function(e){u.err("Unable to unsubscribe to notifications",e),n(e)}))}))};return{configure:function(e){return function(e){return new Promise((function(n,i){MAS.PUSH.HOOK.beforeInitialize();const s=Object.keys(e);for(var a=0;a<s.length;a++)"logger"===s[a]?u.configure(e[s[a]]):t[s[a]]=e[s[a]];if(u.info("Checking browser compatibility..."),!f.isCompatible())return u.err("The browser does not support Service Workers / Cookies"),void i("The browser does not support Service Workers / Cookies");u.info("Loading script ["+t.firebase.firebaseAppUrl+"]..."),o(t.firebase.firebaseAppUrl).then((e=>(u.info("Loading script ["+t.firebase.firebaseMessagingUrl+"]..."),o(t.firebase.firebaseMessagingUrl)))).then((e=>r())).then((e=>{u.info("Application successfully initialized"),n()})).catch((e=>{u.info("Error initializing the application",e),i(e)})).finally((()=>{MAS.PUSH.HOOK.afterInitialize()}))}))}(e)},requestPermission:function(){return s()},manageSubscription:function(){return this.isUserSubscribed()?g():b()},suscribe:function(){return b()},unsubscribe:function(){return g()},isUserSubscribed:function(){return"granted"===Notification.permission&&d.isSubscribed()},canRequestPermission:function(){return"denied"!==Notification.permission&&void 0===f.getCookie("ITR_WPN_DELAYED_REQUEST_PERMISSION")&&!d.isSubscribed()},suspend:function(e){d.suspend(e)},subscriptionInfo:function(){return{status:d.getStatus(),token:d.getToken()}},setTraces:function(e){u.configure(e)},HOOK:{beforeInitialize:function(){},afterInitialize:function(){},beforeSendingTokenToServer:function(e){},afterSendingTokenToServer:function(e){},beforeDeletingTokenToServer:function(e){},afterDeletingTokenToServer:function(e){},onNotificationsBlocked:function(){},onNotificationsDelayed:function(){},onGetDomain:function(){return!1}}}}();